// <auto-generated />
using System;
using ForecastService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForecastService.Migrations
{
    [DbContext(typeof(ForecastDbContext))]
    [Migration("20240112163621_SplitForecastWithForecastRow")]
    partial class SplitForecastWithForecastRow
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ForecastService.Forecast", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Costume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Forecasts");
                });

            modelBuilder.Entity("ForecastService.ForecastRow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ForecastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ForecastValue")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForecastId");

                    b.ToTable("ForecastsRows", t =>
                        {
                            t.HasCheckConstraint("CK_ForecastsRows_Month_Range", "[Month] BETWEEN 0 AND 11");
                        });
                });

            modelBuilder.Entity("ForecastService.ForecastRow", b =>
                {
                    b.HasOne("ForecastService.Forecast", null)
                        .WithMany("ForecastsRow")
                        .HasForeignKey("ForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForecastService.Forecast", b =>
                {
                    b.Navigation("ForecastsRow");
                });
#pragma warning restore 612, 618
        }
    }
}
